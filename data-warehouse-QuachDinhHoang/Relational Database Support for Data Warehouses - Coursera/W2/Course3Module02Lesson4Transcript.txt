Welcome to Lesson 4 of Module 2,
on SQL Subtotal Operators. Letâ€™s have even more fun
with subtotal operators. I'm gonna start with an important usage
question that I want you to think about throughout this lesson. Is the grouping sets operator more widely
used than the cube and rollup operators? Lesson four continues the study
of subtitle operators from lessons two and three. Lesson four covers characteristics
of the grouping sets operator, example statements with a grouping
sets operator in a group by clause. In comparisons to the grouping
sets operator to the cube and roll up operators. You have three learning
objectives in this lesson. Your primary goal is to write select
statements with the grouping sets operator after this lesson. To demonstrate understanding
of the grouping sets operator, you should be able to convert
statements with a cube and rollup operators into statements
with a grouping sets operator. As a more reflective goal, you can think about the importance
of the grouping sets operator. Let's begin with basic characteristics
about the grouping sets operator. The grouping sets operator provides
complete flexibility to generate any set of subtotals, even the normal group by
results are not generated by default. To achieve this flexibility you must
provide explicit specification of subtotal groups, more tedious than
the specification for the cube and roll up operators. The explicit specification for
the grouping sets operator has some similarity with writing
a union query to generate subtotals. For both the union query and grouping sets operator, you must know
the collections of subtotals to generate. This example shows a select statement
using a grouping sets operator. The statement summarizes store sales
by zip code and month for 2012 sales in the U.S.A. and Canada with one
computed column, the sum of dollar sales. The grouping sets operator explicitly
specifies the complete set of sub totals. The new syntax in this statement
is the grouping sets key words with a list of subtotal groups
after the group by clause. The grouping sets operation
contains four subtotal groups. The combination of store, zips, and
time, month, store/zip by itself, time/month by itself and the grand
total specify it as empty parenthesis. Note that the ordering of columns within
the subtotal group does not matter. Thus the combination of StoreZip and TimeMonth is equivalent to TimeMonth and
StoreZip. The order by clause provides a convenient
order to review subtotal rows. I will now execute this statement
using the Oracle SQL developer. The results contains 20 rows
with three columns in each row. The result is equivalent to a cube
operation with a store zip and time months column. This example shows another select
statement using a grouping sets operator. Example II is identical to Example I,
except for the grouping sets operation. In this example, the grouping sets
operation contains three subtotal groups. Store zip by itself, time month by itself in the grand total,
specified as empty parenthesis. The default group by totals are omitted as
a subtotal group that is a combination of store zip and time month is
omitted in a grouping sets list. I will now execute this statement
using the Oracle SQL developer. The result contains eight rows
with three columns in each row. The result contains subtotals for
StoreZip by itself, TimeMonth by itself in the grand total, but no subtotals for
the combination of StoreZip and TimeMonth. These partial select statements allow
convenient comparison of the ROLLUP and GROUPING SETS operators. Complete SELECT statements can be
found in a document in module two. Examples 3 and
4 show a ROLLUP of two columns and the equivalent GROUPING SETS
operation with subtotal groups. Note that the order of the subtotal
groups in the GROUPING SETS operator is not important. But the order of columns in
the rollup operation is important. For clarity, the subtotal groups are
listed from largest, that is a combination of TimeYear and TimeMonth, to smallest,
the empty subtotal group is a grand total. Examples 5 and 6 extend examples to
three columns in a rollup operation and four subtotal groups in the equivalent
grouping sets operation. I will now execute the complete statements
using the Oracle SQL developer. For Examples 3 and 4 the results
contain six rows with three columns for both examples. The order by clauses makes
the results easier to compare. For examples five and six the results contain ten rows
with four columns for both examples. These partial select statements allow
convenient comparison of the cube in grouping sets operators. Examples 7 and
8 show a cube of two columns in the equivalent grouping sets operation,
with four sub total groups. Note that the order of sub total groups in
the grouping set operator, in columns and the cube operation are not important. For clarity, subtotal groups are listed
from the largest, that is a combination of StoreZip and TimeMonth, to smallest,
the empty group for the grand total. Examples 9 and 10 extend to three
columns in the CUBE operation and eight subtotal groups in the equivalent
GROUPING SETS operation. I encourage you to execute the complete
statements and verify equivalent results. You can find the complete SELECT
statements in a document in module two. This lesson continue the presentation
of SQL subtotal operators in lessons two and three. You learned about the grouping sets
operator providing precise control of subtotal rows. To achieve control, the grouping sets operators requires
explicit specification of subtotal groups. Including the most detailed combination,
generally the normal group by clause. The grouping sets operator
has no default subtotals. You also learned that the grouping
sets operator is a useful tool to understand the CUBE and
ROLLUP operators. In answer to the opening question I
suspect that the grouping sets operator is less widely used than the rollup and
cube operators. I've not seen data on the usage of
any subtotal operator, however. The grouping sets operator provides
more control than the cube and rollup operators so
it fills an important niche. I think that the rollup operator is
the most widely used because subtotals are typically required for
hierarchically related columns.